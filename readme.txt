==================================
 CGPOLY
==================================

Welcome to CGPOLY - A package for doing Coarse-Grained Polymer
simulations using Gromacs

Currently this is pretty specific to simulating BPA-PC, but it could
be extended to other polymers as well.

Part of the code is also specific to porting the BPA-PC model from
ESPResSo to Gromacs. The code needs Gromacs 4.x.

Quick start
===========

Run the gen_everything.py script to generate all the tables,
topologies, blahblah and an input file for a BPA-PC system in a 7x7x7
nm box with 80 chains with 43 beads per chain. After that look at the
end of this file for instruction on how to run grompp and mdrun to
start simulating.

Parameters of the model
=======================

All the parameters are found in the params.py file.

Convert tables
==============

In Espresso angle potential tables are of the form

angle(radians)    (+/-?)force    potential

Gromacs tables are of the form

angle(degrees)   potential   -force

program espresso2gro_table.py converts this.

Run it like

./espresso2gro_table.py PCP_TABLE.DAT table_a0.xvg

./espresso2gro_table.py PIP_TABLE.DAT table_a1.xvg

Note that the numbering of the table files is important, see Topology
section below.

Non-bonded interactions
=======================

The non-bonded interaction tables are generated by the
gen_nb_tables.py script. In order to do force capping, use the -f
option and create tables with capped forces. This is needed for
equilibration.

Topology
========

BPA-PC model beads are defined in bpapc.itp

The bonded interactions are generated by the chain_top.py file. See
the script for the parameters for the bonded interactions and the
gromacs molecule definition.

Run it with

./chain_top.py 43 > bpapc43.itp

to create a molecule topology for a chain of 43 beads

Then in bpapc-single.top there is a topology file for a system with
one chain.

The topology is setup such that the PCP angle bonds should be in
table_a0.xvg and PIP angle bonds in table_a1.xvg.

Starting coordinates
====================

The script gen_poly.py takes care of this.

Index file
==========

The easiest way is to run the make_ndx program included with gromacs
as "make_ndx -f bpapc.gro" where bpapc.gro is the starting
coordinates. Create a group with all phenylenes with "a P*", carbonic
acid group with "a C*" and isopropylediene group with "a I*", rename
the groups with "name 2 P" etc. to remove the "*" from the
names. Finally save and quit.

Mdrun input files
=================

The file em.mdp contains a mdrun input file for doing initial steepest
descent minimization, in order to avoid large forces due to the random
walk generation of the polymer chains. However, as the force and
potential are still extremely large close to the bead centers, you
probably need to either use the double precision version of Gromacs,
or else you get overflows, or use the -f option to gen_nb_tables.py to
generate NB tables with force capping. A suitable force capping
parameter for the BPA-PC system with steepest descent might be 1e15.

In the file md.mdp are inputs for actually doing md simulation using
the Langevin thermostat.

Running the system
==================

First equilibrate with steepest descent AND force capping:

./gen_nb_tables.py -f 1E15

grompp -f em.mdp -c bpapc.gro -p bpapc80.top -n index.ndx

mdrun -v -c minimized.gro

Do a second minimization without force capping

./gen_nb_tables.py

grompp -f em.mdp -c minimized.gro -p bpapc80.top -n index.ndx

mdrun -v -c minimized2.gro

And then the actual md run starting with the optimized coordinates

grompp -f md.mdp -c minimized2.gro -p bpapc80.top -n index.ndx

mdrun -v"""


