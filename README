==================================
 CGPOLY
==================================

Welcome to CGPOLY - A package for doing Coarse-Grained Polymer
simulations using Gromacs

Currently this is pretty specific to simulating BPA-PC, but it could
be extended to other polymers as well.

Part of the code is also specific to porting the BPA-PC model from
ESPResSo to Gromacs. The code needs Gromacs 4.x.

Quick start
===========

Run the cgpoly script to generate all the tables, topologies, blahblah
and an input file for a BPA-PC system in a 7x7x7 nm box with 80 chains
with 43 beads per chain. After that look at the end of this file for
instruction on how to run grompp and mdrun to start simulating. E.g.

cgpoly initial.gro

Parameters of the model
=======================

All the parameters are found in the cgparams.py file.

Convert tables
==============

In Espresso angle potential tables are of the form

angle(radians)    (+/-?)force    potential

Gromacs tables are of the form

angle(degrees)   potential   -force

Note that the numbering of the table files is important, see Topology
section below. However cgpoly takes care of this automatically.

Non-bonded interactions
=======================

The non-bonded interaction tables are stored into the files named
table_X_Y.xvg. In order to do force capping, use the -f option to
create tables with capped forces. This is needed for equilibration.

Topology
========

BPA-PC model beads are defined in bpapc.itp

See the script for the parameters for the bonded interactions and the
gromacs molecule definition.

A single chain is defined in the file bpapcNN.itp, where NN is the
number of beads per chain, see the -b option to cgpoly.

The topology is setup such that the PCP angle bonds should be in
table_a0.xvg and PIP angle bonds in table_a1.xvg.

Starting coordinates
====================

These are written to the output file in GRO format.

Index file
==========

cgpoly automatically generates index files. In order to do it
yourself:

The easiest way is to run the make_ndx program included with gromacs
as "make_ndx -f bpapc.gro" where bpapc.gro is the starting
coordinates. Create a group with all phenylenes with "a P*", carbonic
acid group with "a C*" and isopropylediene group with "a I*", rename
the groups with "name 2 P" etc. to remove the "*" from the
names. Finally save and quit.

For the angle index files, cgpoly also generates these. You can also
use the mk_angndx tool from gromacs.

Mdrun input files
=================

The file em.mdp contains a mdrun input file for doing initial steepest
descent minimization, in order to avoid large forces due to the random
walk generation of the polymer chains. However, as the force and
potential are still extremely large close to the bead centers, you
probably need to either use the double precision version of Gromacs,
or else you get overflows, or use the -f option to cgpoly to generate
NB tables with force capping. A suitable initial force capping
parameter for the BPA-PC system with steepest descent might be 1e15.

In the file md.mdp are inputs for actually doing md simulation using
the velocity rescale thermostat.

EXAMPLE:  Running the system
============================

First equilibrate with steepest descent AND force capping:

cgpoly -f 1e15 initial.gro

grompp -f em.mdp -p bpapc80.top -n index.ndx -c initial.gro

mdrun -v -c minimized.gro

Do a MD run with very soft force capping

cgpoly -f 1e3

grompp -f md.mdp -p bpapc80.top -n index.ndx -c minimized.gro

mdrun -v -c md1.gro

Remember that after the first MD run you should set gen_vel = no in
md.mdp.

Gradually increase the force capping until you can completely remove
it.

Using the Velocity Rescale thermostat
=====================================

See JCP 126, 014101 for details

1. 1e6 steps, dt=0.001 ps, tau_t = 0.1, final md1.gro

2. 1e6 steps, dt = 0.0005 ps, tau_t = 0.01, final md2.gro

Force cap removed, following simulations are with full potentials.

3. 1e6 steps, dt=0.0005 ps, tau_t = 0.01, final md3.gro

Try to reduce drift in conserved energy:

4. 1e5 step, dt=0.0002 ps, tau_t = 0.01, final md4.gro

5. 1e6 steps, dt=0.0004 ps, tau_t = 0.01, final md5.gro

0.0004 too big, try 0.0003

6. 1e6 steps, dt=0.0003ps, tau_t = 0.01, final md6.gro

0.3 fs still slightly too big

7. 1e6 steps, dt=0.00025ps, tau_t=0.01, final md7.gro

0.25 fs still too big, back to 0.2 fs then

8. 1e8 steps, dt=0.0002ps, tau_t=0.01, final md8.gro

System performance 18 ns/day w/3 processors => 6 ns/day/cpu


Using Velocity Rescale thermostat and constraints
=================================================

Set 

constraints              = all-bonds

in the .mdp files. This means bond length potentials will be replaced
with constraints. This allows to increase the timestep to dt=0.01ps,
an improvement of 2 orders of magnitude! However, while the system
does not explode, this timestep is too large as the conserved energy
drifts and the temperature rises.

- dt=0.001 small enough

- dt=0.005 too big

- dt=0.002 also too big

Runs

1. 1e6, dt=0.001, tau_t = 0.03, final md1.gro

2. 1e5, dt=0.001, tau=0.1, final md2.gro

Remove force capping

3. 1e6, dt=0.001, tau=0.1, final md3.gro

System performance on 1 cpu (2.66 GHz Intel), 28 ns/day.


System scaling on Louhi
=======================

Simple benchmark with the v-rescale, constraint system above.


LINCS limits scaling as lincs_order + 1 bonds need to fit one a single
node. Default lincs_order = 4, lincs_iter = 1. Reduce lincs_order and
increase lincs_iter such that (1+lincs_iter)*lincs_order stays the
same or increases in order to not lose accuracy.

By default then the const value = 8. Possible choices:

lincs_order=3, lincs_iter = 2

lincs_order = 2, lincs_iter = 3

lincs_order = 1, lincs_iter = 7

procs   ns/day   lincs_order  lincs_iter
-----   ------   -----------  ----------
1       25.068
4       72.007
8       123.441
16      108.011  3            2
16      96.010   2            3
16      78.553   1            7
32      86.409   3            2
32      72.007   2            3
32      66.468   1            7
64      61.720   3            2
64      32.003   1            7


Scaling of bigger system with 100 chains, 83 beads/chain
--------------------------------------------------------

procs   ns/day
-----   ------
8       50.829
16      78.553
32      72.007
64      72.007


Equilibration of big system 100 chains 83 beads/chain
=====================================================

1. em, 200 steps, forcecap 1e15 => minimized.gro

2. md, 1e5 steps, forcecap 1e3 => md1.gro

3. md, 1e5 steps, forcecap 1e10 => md2.gro

4. md, 1e5 steps, no forcecap => md3.gro

5. md, 1e7 steps, no fc => md4.gro

6. md, 1e7 steps, no fc => md5.gro

7. md, 1e8 steps, no fc => md6.gro

8. md, 1e8 steps, no fc => md7.gro

9. md, 1e7 steps, no fc, dt=0.001, tau=0.05 => md8.gro

10. md, 1e8 steps, dt=0.0008, tau=0.05 => md9.gro

8. md, 1e8 steps, no fc => md7.gro


Analysis of big system
======================

$ g_polystat -n index.ndx -b 20000 -dt 10000

Average end to end distance: 6.238 (nm)

Average radius of gyration:  2.545 (nm)

Hess et al article: Rg = 2.74 nm, Re = 6.80

$ g_msd -f traj.xtc -n index.ndx

# MSD gathered over 100000 ps with 10001 restarts
# Diffusion constants fitted from time 10000 to 90000 ps
# D[     BPAPC] = 0.0238 (+/- 0.0084) (1e-5 cm^2/s)

Internal distances
==================

Check equilibration by monitoring internal distances (Auhl et al., JCP
119, 12718). For Gromacs 4.0.x you need to patch gromacs with the
patch

http://tfy.tkk.fi/~job/cgpoly/polystat.diff

This adds a new "-i" option to g_polystat which calculates internal
distances and plots them. This functionality has been included in
Gromacs 4.1 (not yet released at the time of writing this).


Using gromacs to analyse Espresso data
======================================

Create index file and corresponding topology, then convert Espresso
.pdb files to gromacs with

echo 1|g_trjconv -box  15.9365 15.9365 31.873 -n index.ndx -s topol.tpr -f pc-realwall5-100000000.pdb -o pc100e6.gro

Need to put correct box size, since espresso doesn't put box size into
.pdb file. Also, length units will be messed up, both due to LJ units
and Espresso using ï¿½ rather than nm.

Concatenate a bunch of trajectories with

g_trjcat -f pc1* pc2* pc3* pc4* pc5* pc6* pc7* pc8* pc9* -o pctraj.xtc -cat

$ redo analysis after next run...
