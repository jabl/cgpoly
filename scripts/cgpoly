#!/usr/bin/python

# Copyright (C) 2009 Janne Blomqvist

#  This file is part of cgpoly.

#  cgpoly is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.

#  cgpoly is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

#  You should have received a copy of the GNU General Public License
#  along with cgpoly.  If not, see <http://www.gnu.org/licenses/>.

# Generate everything needed for a coarse-grained BPA-PC system
# with, by default 80 chains and 43 beads per chain in a 7x7x7 nm box

import cgpoly
import os.path
from optparse import OptionParser

usage = """%prog [options] outfile

Setups a coarse grained BPA-PC system for GROMACS

This program will generate

- BPA-PC polymer coordinates, storing them into the outfile in
GRO format.

- Index files for the angles PCP-angles.ndx,
PIP-angles.ndx, IPC-angles.ndx that can be used with g_angle.

- Converts espresso format angle potential tables to GROMACS format.

- Topology for bonded interaction

- Tables for nonbonded interactions."""

parser = OptionParser(usage)

parser.add_option('-b', '--beads-per-chain', dest='bpc', help='Number of beads per chain')
parser.add_option('-n', '--num-chains', dest='nchains', help='Number of chains')
parser.add_option('-s', '--size', dest='size', help='Size of simulation cube side')
parser.add_option('-a', '--angle', dest='angle', help='Angle between beads')
parser.add_option('-f', '--forcecap', dest='fcap', help='Cap maximum force at this value')
parser.add_option('-c', '--config', dest='conf', help='Config file with parameters, default cgparams.py in current directory')
parser.add_option('-w', '--wall', dest='wall', help='Place a  wall at z=0', action='store_true')


(options, args) = parser.parse_args()
if options.bpc:
    bpc = int(options.bpc)
else:
    bpc = 43
if options.nchains:
    nchains = int(options.nchains)
else:
    nchains = 80
if options.size:
    try:
        s = float(options.size)
        box = (s, s, s)
    except ValueError:
        box = [float(x) for x in options.size.split()]
else:
    box = (7, 7, 7)
if options.fcap:
    fcap = float(options.fcap)
else:
    fcap = None
if options.conf:
    conf_file = options.conf
else:
    conf_file = None

if options.wall:
    constr = [cgpoly.polymer.WallConstraint(0),
              cgpoly.polymer.WallConstraint(box[2])]
    wall = True
else:
    constr = []
    wall = False

# Copy required data files with parameters etc.
cgpoly.params.copy_data_files()

conf = cgpoly.params.CGConfig(conf_file)
ddir = cgpoly.params.find_datadir()

# Average bead-bead distance
dist = conf.avg_r

# Convert Espresso format tables for bonded angle potentials to
# Gromacs format
top = cgpoly.topology.TopologyGenerator(conf.c)
exp_pcp = top.espresso2gro_convert_table(os.path.join(ddir, 'PCP_TABLE.DAT'),
                                         'table_a0.xvg')
exp_pip = top.espresso2gro_convert_table(os.path.join(ddir, 'PIP_TABLE.DAT'),
                                         'table_a1.xvg')

# Chain topology and bonded interactions
itpfile = 'bpapc' + str(bpc) + '.itp'
top.genchain_top(bpc, itpfile)
topfile = 'bpapc' + str(nchains) + '.top'
top.genbox_top(nchains, bpc, itpfile, topfile)

# PSF topology file (for VMD)
if len(args) > 0:
    if args[0].endswith('.gro'):
        psffile = args[0][:-4] + '.psf'
    else:
        psffile = args[0] + '.psf'
    top.gen_psf(nchains, bpc, psffile)

# Average angle
# angles in monomer: PCP, IPC, PIP, IPC
if options.angle:
    angle = float(options.angle)
else:
    # Average IPC angle is 175.7 deg taken from an equilibrated simulation
    # (obviously can't never be 180)
    # angle = (exp_pcp + exp_pip + 2*175.731)/4
    # However, this angle produces a too large radius of gyration, so just
    # use one that has been determined to produce the correct one
    angle = 141

# Generate coordinates if file argument given
if len(args) > 0:
    cgpoly.polymer.gen_bpapc(args[0], bpc, nchains, box, (True, True, True),
                             dist, angle, constr)


# Table files with non-bonded interactions (WCA potentials)
nb = cgpoly.nonbonded.NonBonded(conf.c, wall)
nb.gen_nb_files(fcap)


